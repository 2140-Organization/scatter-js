!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=239)}({0:function(t,n){t.exports=ScatterJS},19:function(t,n,e){var r=e(24),o=e(34);t.exports=function(t,n){return!n||"object"!==r(n)&&"function"!=typeof n?o(t):n}},2:function(t,n){t.exports=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}},20:function(t,n){function e(n){return t.exports=e=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},e(n)}t.exports=e},21:function(t,n,e){var r=e(35);t.exports=function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&r(t,n)}},239:function(t,n,e){"use strict";e.r(n),e.d(n,"default",function(){return d});var r=e(2),o=e.n(r),u=e(3),i=e.n(u),c=e(19),f=e.n(c),a=e(20),l=e.n(a),s=e(21),p=e.n(s),y=e(0),b=function(t,n){return new Proxy(t,n)},d=function(t){function n(){return o()(this,n),f()(this,l()(n).call(this,y.Blockchains.TRX,y.PluginTypes.BLOCKCHAIN_SUPPORT))}return p()(n,t),i()(n,[{key:"hookProvider",value:function(t){throw new Error("Tron hook provider not enabled yet.")}},{key:"signatureProvider",value:function(){var t=arguments.length<=0?void 0:arguments[0],n=arguments.length<=1?void 0:arguments[1];return function(e,r){e=y.Network.fromJson(e);var o=function(){var n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:null;return function(o){return t(),new Promise(function(t,u){var i={transaction:{transaction:o,participants:[r.defaultAddress.base58]},blockchain:y.Blockchains.TRX,network:e,requiredFields:{},abi:n};y.SocketService.sendApiRequest({type:"requestSignature",payload:i}).then(function(n){return t(n.signatures[0])}).catch(function(t){return u(t)})})}},u=function(){var t=n(),e=t&&t.accounts.find(function(t){return t.blockchain===y.Blockchains.TRX})?t.accounts.find(function(t){return t.blockchain===y.Blockchains.TRX}).address:null;e&&r.setAddress(e)};return b(r,{get:function(t,n){return u(),r.trx.sign=o(),"function"==typeof t[n]?function(){for(var e=arguments.length,r=new Array(e),i=0;i<e;i++)r[i]=arguments[i];return"contract"===n?b(t[n].apply(t,r),{get:function(n,e){return u(),t.trx.sign=o({abi:r[0],address:r[1],method:e}),n[e]}}):t[n].apply(t,r)}:t[n]}})}}}]),n}(y.Plugin);"undefined"!=typeof window&&(window.ScatterTron=d)},24:function(t,n){function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(n){return"function"==typeof Symbol&&"symbol"===e(Symbol.iterator)?t.exports=r=function(t){return e(t)}:t.exports=r=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":e(t)},r(n)}t.exports=r},3:function(t,n){function e(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}},34:function(t,n){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},35:function(t,n){function e(n,r){return t.exports=e=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t},e(n,r)}t.exports=e}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vL2V4dGVybmFsIFwiU2NhdHRlckpTXCIiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvcG9zc2libGVDb25zdHJ1Y3RvclJldHVybi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9jbGFzc0NhbGxDaGVjay5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9nZXRQcm90b3R5cGVPZi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9pbmhlcml0cy5qcyIsIndlYnBhY2s6Ly8vLi9wYWNrYWdlcy9wbHVnaW4tdHJvbi9zcmMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL0BiYWJlbC9ydW50aW1lL2hlbHBlcnMvdHlwZW9mLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2NyZWF0ZUNsYXNzLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9AYmFiZWwvcnVudGltZS9oZWxwZXJzL2Fzc2VydFRoaXNJbml0aWFsaXplZC5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvQGJhYmVsL3J1bnRpbWUvaGVscGVycy9zZXRQcm90b3R5cGVPZi5qcyJdLCJuYW1lcyI6WyJpbnN0YWxsZWRNb2R1bGVzIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiZXhwb3J0cyIsIm1vZHVsZSIsImkiLCJsIiwibW9kdWxlcyIsImNhbGwiLCJtIiwiYyIsImQiLCJuYW1lIiwiZ2V0dGVyIiwibyIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZW51bWVyYWJsZSIsImdldCIsInIiLCJTeW1ib2wiLCJ0b1N0cmluZ1RhZyIsInZhbHVlIiwidCIsIm1vZGUiLCJfX2VzTW9kdWxlIiwibnMiLCJjcmVhdGUiLCJrZXkiLCJiaW5kIiwibiIsIm9iamVjdCIsInByb3BlcnR5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJwIiwicyIsIlNjYXR0ZXJKUyIsIl90eXBlb2YiLCJhc3NlcnRUaGlzSW5pdGlhbGl6ZWQiLCJzZWxmIiwiaW5zdGFuY2UiLCJDb25zdHJ1Y3RvciIsIlR5cGVFcnJvciIsIl9nZXRQcm90b3R5cGVPZiIsInNldFByb3RvdHlwZU9mIiwiZ2V0UHJvdG90eXBlT2YiLCJfX3Byb3RvX18iLCJzdWJDbGFzcyIsInN1cGVyQ2xhc3MiLCJjb25zdHJ1Y3RvciIsIndyaXRhYmxlIiwiY29uZmlndXJhYmxlIiwicHJveHkiLCJkdW1teSIsImhhbmRsZXIiLCJQcm94eSIsIlNjYXR0ZXJUcm9uIiwiX2JhYmVsX3J1bnRpbWVfaGVscGVyc19jbGFzc0NhbGxDaGVja19fV0VCUEFDS19JTVBPUlRFRF9NT0RVTEVfMF9fX2RlZmF1bHQiLCJ0aGlzIiwiX2JhYmVsX3J1bnRpbWVfaGVscGVyc19wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuX19XRUJQQUNLX0lNUE9SVEVEX01PRFVMRV8yX19fZGVmYXVsdCIsIl9iYWJlbF9ydW50aW1lX2hlbHBlcnNfZ2V0UHJvdG90eXBlT2ZfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzNfX19kZWZhdWx0Iiwic2NhdHRlcmpzX2NvcmVfX1dFQlBBQ0tfSU1QT1JURURfTU9EVUxFXzVfXyIsIlRSWCIsIkJMT0NLQ0hBSU5fU1VQUE9SVCIsIm5ldHdvcmsiLCJFcnJvciIsInRocm93SWZOb0lkZW50aXR5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwidW5kZWZpbmVkIiwiaWRlbnRpdHlGZXRjaGVyIiwiX3Ryb24iLCJmcm9tSnNvbiIsImdldFNpZ25lciIsImFiaSIsInNpZ25hcmdzIiwiUHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJwYXlsb2FkIiwidHJhbnNhY3Rpb24iLCJwYXJ0aWNpcGFudHMiLCJkZWZhdWx0QWRkcmVzcyIsImJhc2U1OCIsImJsb2NrY2hhaW4iLCJyZXF1aXJlZEZpZWxkcyIsInNlbmRBcGlSZXF1ZXN0IiwidHlwZSIsInRoZW4iLCJ4Iiwic2lnbmF0dXJlcyIsImNhdGNoIiwic2V0QWRkcmVzcyIsImlkIiwiYWRkcmVzcyIsImFjY291bnRzIiwiZmluZCIsIm1ldGhvZCIsInRyeCIsInNpZ24iLCJfbGVuIiwiYXJncyIsIkFycmF5IiwiX2tleSIsImFwcGx5IiwiYSIsImIiLCJ3aW5kb3ciLCJfdHlwZW9mMiIsIm9iaiIsIml0ZXJhdG9yIiwiX2RlZmluZVByb3BlcnRpZXMiLCJ0YXJnZXQiLCJwcm9wcyIsImRlc2NyaXB0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJSZWZlcmVuY2VFcnJvciIsIl9zZXRQcm90b3R5cGVPZiJdLCJtYXBwaW5ncyI6ImFBQ0EsSUFBQUEsS0FHQSxTQUFBQyxFQUFBQyxHQUdBLEdBQUFGLEVBQUFFLEdBQ0EsT0FBQUYsRUFBQUUsR0FBQUMsUUFHQSxJQUFBQyxFQUFBSixFQUFBRSxJQUNBRyxFQUFBSCxFQUNBSSxHQUFBLEVBQ0FILFlBVUEsT0FOQUksRUFBQUwsR0FBQU0sS0FBQUosRUFBQUQsUUFBQUMsSUFBQUQsUUFBQUYsR0FHQUcsRUFBQUUsR0FBQSxFQUdBRixFQUFBRCxRQUtBRixFQUFBUSxFQUFBRixFQUdBTixFQUFBUyxFQUFBVixFQUdBQyxFQUFBVSxFQUFBLFNBQUFSLEVBQUFTLEVBQUFDLEdBQ0FaLEVBQUFhLEVBQUFYLEVBQUFTLElBQ0FHLE9BQUFDLGVBQUFiLEVBQUFTLEdBQTBDSyxZQUFBLEVBQUFDLElBQUFMLEtBSzFDWixFQUFBa0IsRUFBQSxTQUFBaEIsR0FDQSxvQkFBQWlCLGVBQUFDLGFBQ0FOLE9BQUFDLGVBQUFiLEVBQUFpQixPQUFBQyxhQUF3REMsTUFBQSxXQUV4RFAsT0FBQUMsZUFBQWIsRUFBQSxjQUFpRG1CLE9BQUEsS0FRakRyQixFQUFBc0IsRUFBQSxTQUFBRCxF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Q29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMjM5KTtcbiIsIm1vZHVsZS5leHBvcnRzID0gU2NhdHRlckpTOyIsInZhciBfdHlwZW9mID0gcmVxdWlyZShcIi4uL2hlbHBlcnMvdHlwZW9mXCIpO1xuXG52YXIgYXNzZXJ0VGhpc0luaXRpYWxpemVkID0gcmVxdWlyZShcIi4vYXNzZXJ0VGhpc0luaXRpYWxpemVkXCIpO1xuXG5mdW5jdGlvbiBfcG9zc2libGVDb25zdHJ1Y3RvclJldHVybihzZWxmLCBjYWxsKSB7XG4gIGlmIChjYWxsICYmIChfdHlwZW9mKGNhbGwpID09PSBcIm9iamVjdFwiIHx8IHR5cGVvZiBjYWxsID09PSBcImZ1bmN0aW9uXCIpKSB7XG4gICAgcmV0dXJuIGNhbGw7XG4gIH1cblxuICByZXR1cm4gYXNzZXJ0VGhpc0luaXRpYWxpemVkKHNlbGYpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9wb3NzaWJsZUNvbnN0cnVjdG9yUmV0dXJuOyIsImZ1bmN0aW9uIF9jbGFzc0NhbGxDaGVjayhpbnN0YW5jZSwgQ29uc3RydWN0b3IpIHtcbiAgaWYgKCEoaW5zdGFuY2UgaW5zdGFuY2VvZiBDb25zdHJ1Y3RvcikpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IGNhbGwgYSBjbGFzcyBhcyBhIGZ1bmN0aW9uXCIpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX2NsYXNzQ2FsbENoZWNrOyIsImZ1bmN0aW9uIF9nZXRQcm90b3R5cGVPZihvKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX2dldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mID8gT2JqZWN0LmdldFByb3RvdHlwZU9mIDogZnVuY3Rpb24gX2dldFByb3RvdHlwZU9mKG8pIHtcbiAgICByZXR1cm4gby5fX3Byb3RvX18gfHwgT2JqZWN0LmdldFByb3RvdHlwZU9mKG8pO1xuICB9O1xuICByZXR1cm4gX2dldFByb3RvdHlwZU9mKG8pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9nZXRQcm90b3R5cGVPZjsiLCJ2YXIgc2V0UHJvdG90eXBlT2YgPSByZXF1aXJlKFwiLi9zZXRQcm90b3R5cGVPZlwiKTtcblxuZnVuY3Rpb24gX2luaGVyaXRzKHN1YkNsYXNzLCBzdXBlckNsYXNzKSB7XG4gIGlmICh0eXBlb2Ygc3VwZXJDbGFzcyAhPT0gXCJmdW5jdGlvblwiICYmIHN1cGVyQ2xhc3MgIT09IG51bGwpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3VwZXIgZXhwcmVzc2lvbiBtdXN0IGVpdGhlciBiZSBudWxsIG9yIGEgZnVuY3Rpb25cIik7XG4gIH1cblxuICBzdWJDbGFzcy5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKHN1cGVyQ2xhc3MgJiYgc3VwZXJDbGFzcy5wcm90b3R5cGUsIHtcbiAgICBjb25zdHJ1Y3Rvcjoge1xuICAgICAgdmFsdWU6IHN1YkNsYXNzLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9XG4gIH0pO1xuICBpZiAoc3VwZXJDbGFzcykgc2V0UHJvdG90eXBlT2Yoc3ViQ2xhc3MsIHN1cGVyQ2xhc3MpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IF9pbmhlcml0czsiLCJpbXBvcnQge1xyXG5cdFBsdWdpbixcclxuXHRQbHVnaW5UeXBlcyxcclxuXHRCbG9ja2NoYWlucyxcclxuXHROZXR3b3JrLFxyXG5cdFNvY2tldFNlcnZpY2VcclxufSBmcm9tICdzY2F0dGVyanMtY29yZSc7XHJcblxyXG5jb25zdCBwcm94eSA9IChkdW1teSwgaGFuZGxlcikgPT4gbmV3IFByb3h5KGR1bW15LCBoYW5kbGVyKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNjYXR0ZXJUcm9uIGV4dGVuZHMgUGx1Z2luIHtcclxuXHJcbiAgICBjb25zdHJ1Y3Rvcigpe1xyXG4gICAgICAgIHN1cGVyKEJsb2NrY2hhaW5zLlRSWCwgUGx1Z2luVHlwZXMuQkxPQ0tDSEFJTl9TVVBQT1JUKVxyXG4gICAgfVxyXG5cclxuICAgIGhvb2tQcm92aWRlcihuZXR3b3JrKXtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1Ryb24gaG9vayBwcm92aWRlciBub3QgZW5hYmxlZCB5ZXQuJyk7XHJcbiAgICB9XHJcblxyXG4gICAgc2lnbmF0dXJlUHJvdmlkZXIoLi4uYXJncyl7XHJcbiAgICAgICAgY29uc3QgdGhyb3dJZk5vSWRlbnRpdHkgPSBhcmdzWzBdO1xyXG4gICAgICAgIGNvbnN0IGlkZW50aXR5RmV0Y2hlciA9IGFyZ3NbMV07XHJcblxyXG5cclxuXHJcbiAgICAgICAgcmV0dXJuIChuZXR3b3JrLCBfdHJvbikgPT4ge1xyXG5cclxuICAgICAgICAgICAgbmV0d29yayA9IE5ldHdvcmsuZnJvbUpzb24obmV0d29yayk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCBnZXRTaWduZXIgPSAoYWJpID0gbnVsbCkgPT4ge1xyXG5cclxuICAgICAgICAgICAgICAgIHJldHVybiBzaWduYXJncyA9PiB7XHJcbiAgICAgICAgICAgICAgICAgICAgdGhyb3dJZk5vSWRlbnRpdHkoKTtcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgdHJhbnNhY3Rpb24gPSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0cmFuc2FjdGlvbjpzaWduYXJncyxcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHBhcnRpY2lwYW50czpbX3Ryb24uZGVmYXVsdEFkZHJlc3MuYmFzZTU4XSxcclxuICAgICAgICAgICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IHsgdHJhbnNhY3Rpb24sIGJsb2NrY2hhaW46QmxvY2tjaGFpbnMuVFJYLCBuZXR3b3JrLCByZXF1aXJlZEZpZWxkczp7fSwgYWJpIH07XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIFNvY2tldFNlcnZpY2Uuc2VuZEFwaVJlcXVlc3Qoe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdHlwZToncmVxdWVzdFNpZ25hdHVyZScsXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXlsb2FkXHJcbiAgICAgICAgICAgICAgICAgICAgICAgIH0pLnRoZW4oeCA9PiByZXNvbHZlKHguc2lnbmF0dXJlc1swXSkpXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgLmNhdGNoKHggPT4gcmVqZWN0KHgpKTtcclxuICAgICAgICAgICAgICAgICAgICB9KVxyXG4gICAgICAgICAgICAgICAgfTtcclxuICAgICAgICAgICAgfTtcclxuXHJcblxyXG5cclxuICAgICAgICAgICAgY29uc3Qgc2V0QWRkcmVzcyA9ICgpID0+IHtcclxuICAgICAgICAgICAgICAgIGNvbnN0IGlkID0gaWRlbnRpdHlGZXRjaGVyKCk7XHJcbiAgICAgICAgICAgICAgICBjb25zdCBhZGRyZXNzID0gaWQgJiYgaWQuYWNjb3VudHMuZmluZCh4ID0+IHguYmxvY2tjaGFpbiA9PT0gQmxvY2tjaGFpbnMuVFJYKVxyXG4gICAgICAgICAgICAgICAgICAgID8gaWQuYWNjb3VudHMuZmluZCh4ID0+IHguYmxvY2tjaGFpbiA9PT0gQmxvY2tjaGFpbnMuVFJYKS5hZGRyZXNzXHJcbiAgICAgICAgICAgICAgICAgICAgOiBudWxsO1xyXG5cclxuICAgICAgICAgICAgICAgIGlmKGFkZHJlc3MpIF90cm9uLnNldEFkZHJlc3MoYWRkcmVzcyk7XHJcbiAgICAgICAgICAgIH07XHJcblxyXG4gICAgICAgICAgICByZXR1cm4gcHJveHkoX3Ryb24sIHtcclxuICAgICAgICAgICAgICAgIGdldChpbnN0YW5jZSwgbWV0aG9kKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgc2V0QWRkcmVzcygpO1xyXG4gICAgICAgICAgICAgICAgICAgIF90cm9uLnRyeC5zaWduID0gZ2V0U2lnbmVyKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgICAgIGlmKHR5cGVvZiBpbnN0YW5jZVttZXRob2RdID09PSAnZnVuY3Rpb24nKSByZXR1cm4gKC4uLmFyZ3MpID0+IHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaWYobWV0aG9kID09PSAnY29udHJhY3QnKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gcHJveHkoaW5zdGFuY2VbbWV0aG9kXSguLi5hcmdzKSwge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGdldChhLGIpe1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzZXRBZGRyZXNzKCk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluc3RhbmNlLnRyeC5zaWduID0gZ2V0U2lnbmVyKHthYmk6IGFyZ3NbMF0sIGFkZHJlc3M6IGFyZ3NbMV0sIG1ldGhvZDpifSk7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybiBhW2JdO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2VbbWV0aG9kXSguLi5hcmdzKVxyXG5cclxuICAgICAgICAgICAgICAgICAgICB9O1xyXG4gICAgICAgICAgICAgICAgICAgIGVsc2UgcmV0dXJuIGluc3RhbmNlW21ldGhvZF07XHJcblxyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9KTtcclxuICAgICAgICB9XHJcbiAgICB9XHJcbn1cclxuXHJcbmlmKHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnKSB7XHJcbiAgICB3aW5kb3cuU2NhdHRlclRyb24gPSBTY2F0dGVyVHJvbjtcclxufSIsImZ1bmN0aW9uIF90eXBlb2YyKG9iaikgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIpIHsgX3R5cGVvZjIgPSBmdW5jdGlvbiBfdHlwZW9mMihvYmopIHsgcmV0dXJuIHR5cGVvZiBvYmo7IH07IH0gZWxzZSB7IF90eXBlb2YyID0gZnVuY3Rpb24gX3R5cGVvZjIob2JqKSB7IHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqOyB9OyB9IHJldHVybiBfdHlwZW9mMihvYmopOyB9XG5cbmZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gIGlmICh0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgX3R5cGVvZjIoU3ltYm9sLml0ZXJhdG9yKSA9PT0gXCJzeW1ib2xcIikge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gX3R5cGVvZjIob2JqKTtcbiAgICB9O1xuICB9IGVsc2Uge1xuICAgIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IGZ1bmN0aW9uIF90eXBlb2Yob2JqKSB7XG4gICAgICByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogX3R5cGVvZjIob2JqKTtcbiAgICB9O1xuICB9XG5cbiAgcmV0dXJuIF90eXBlb2Yob2JqKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mOyIsImZ1bmN0aW9uIF9kZWZpbmVQcm9wZXJ0aWVzKHRhcmdldCwgcHJvcHMpIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcm9wcy5sZW5ndGg7IGkrKykge1xuICAgIHZhciBkZXNjcmlwdG9yID0gcHJvcHNbaV07XG4gICAgZGVzY3JpcHRvci5lbnVtZXJhYmxlID0gZGVzY3JpcHRvci5lbnVtZXJhYmxlIHx8IGZhbHNlO1xuICAgIGRlc2NyaXB0b3IuY29uZmlndXJhYmxlID0gdHJ1ZTtcbiAgICBpZiAoXCJ2YWx1ZVwiIGluIGRlc2NyaXB0b3IpIGRlc2NyaXB0b3Iud3JpdGFibGUgPSB0cnVlO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGRlc2NyaXB0b3Iua2V5LCBkZXNjcmlwdG9yKTtcbiAgfVxufVxuXG5mdW5jdGlvbiBfY3JlYXRlQ2xhc3MoQ29uc3RydWN0b3IsIHByb3RvUHJvcHMsIHN0YXRpY1Byb3BzKSB7XG4gIGlmIChwcm90b1Byb3BzKSBfZGVmaW5lUHJvcGVydGllcyhDb25zdHJ1Y3Rvci5wcm90b3R5cGUsIHByb3RvUHJvcHMpO1xuICBpZiAoc3RhdGljUHJvcHMpIF9kZWZpbmVQcm9wZXJ0aWVzKENvbnN0cnVjdG9yLCBzdGF0aWNQcm9wcyk7XG4gIHJldHVybiBDb25zdHJ1Y3Rvcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfY3JlYXRlQ2xhc3M7IiwiZnVuY3Rpb24gX2Fzc2VydFRoaXNJbml0aWFsaXplZChzZWxmKSB7XG4gIGlmIChzZWxmID09PSB2b2lkIDApIHtcbiAgICB0aHJvdyBuZXcgUmVmZXJlbmNlRXJyb3IoXCJ0aGlzIGhhc24ndCBiZWVuIGluaXRpYWxpc2VkIC0gc3VwZXIoKSBoYXNuJ3QgYmVlbiBjYWxsZWRcIik7XG4gIH1cblxuICByZXR1cm4gc2VsZjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBfYXNzZXJ0VGhpc0luaXRpYWxpemVkOyIsImZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gIG1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mID0gT2JqZWN0LnNldFByb3RvdHlwZU9mIHx8IGZ1bmN0aW9uIF9zZXRQcm90b3R5cGVPZihvLCBwKSB7XG4gICAgby5fX3Byb3RvX18gPSBwO1xuICAgIHJldHVybiBvO1xuICB9O1xuXG4gIHJldHVybiBfc2V0UHJvdG90eXBlT2YobywgcCk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gX3NldFByb3RvdHlwZU9mOyJdLCJzb3VyY2VSb290IjoiIn0=