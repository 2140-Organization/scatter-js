!function(t){var n={};function e(r){if(n[r])return n[r].exports;var o=n[r]={i:r,l:!1,exports:{}};return t[r].call(o.exports,o,o.exports,e),o.l=!0,o.exports}e.m=t,e.c=n,e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{enumerable:!0,get:r})},e.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},e.t=function(t,n){if(1&n&&(t=e(t)),8&n)return t;if(4&n&&"object"==typeof t&&t&&t.__esModule)return t;var r=Object.create(null);if(e.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:t}),2&n&&"string"!=typeof t)for(var o in t)e.d(r,o,function(n){return t[n]}.bind(null,o));return r},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,n){return Object.prototype.hasOwnProperty.call(t,n)},e.p="",e(e.s=278)}({1:function(t,n){t.exports=ScatterJS},12:function(t,n,e){var r=e(24),o=e(31);t.exports=function(t,n){return!n||"object"!==r(n)&&"function"!=typeof n?o(t):n}},13:function(t,n){function e(n){return t.exports=e=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},e(n)}t.exports=e},14:function(t,n,e){var r=e(32);t.exports=function(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&r(t,n)}},24:function(t,n){function e(t){return(e="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function r(n){return"function"==typeof Symbol&&"symbol"===e(Symbol.iterator)?t.exports=r=function(t){return e(t)}:t.exports=r=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":e(t)},r(n)}t.exports=r},278:function(t,n,e){"use strict";e.r(n),e.d(n,"default",function(){return v});var r=e(3),o=e.n(r),u=e(4),i=e.n(u),c=e(12),f=e.n(c),a=e(13),l=e.n(a),s=e(14),p=e.n(s),y=e(1),b=y.SocketService,d=function(t,n){return new Proxy(t,n)},v=function(t){function n(){return o()(this,n),f()(this,l()(n).call(this,y.Blockchains.TRX,y.PluginTypes.BLOCKCHAIN_SUPPORT))}return p()(n,t),i()(n,[{key:"setSocketService",value:function(t){b=t}},{key:"hookProvider",value:function(){throw new Error("Tron hook provider not enabled yet.")}},{key:"signatureProvider",value:function(){var t=0>=arguments.length?void 0:arguments[0],n=1>=arguments.length?void 0:arguments[1];return function(e,r){e=y.Network.fromJson(e);var o=function(){var n=0<arguments.length&&void 0!==arguments[0]?arguments[0]:null;return function(o){return t(),new Promise(function(t,u){var i={transaction:{transaction:o,participants:[r.defaultAddress.base58]},blockchain:y.Blockchains.TRX,network:e,requiredFields:{},abi:n};b.sendApiRequest({type:"requestSignature",payload:i}).then(function(n){return t(n.signatures[0])}).catch(function(t){return u(t)})})}},u=function(){var t=n(),e=t&&t.accounts.find(function(t){return t.blockchain===y.Blockchains.TRX})?t.accounts.find(function(t){return t.blockchain===y.Blockchains.TRX}).address:null;e&&r.setAddress(e)};return d(r,{get:function(t,n){return u(),r.trx.sign=o(),"function"==typeof t[n]?function(){for(var e=arguments.length,r=Array(e),i=0;i<e;i++)r[i]=arguments[i];return"contract"===n?d(t[n].apply(t,r),{get:function(n,e){return u(),t.trx.sign=o({abi:r[0],address:r[1],method:e}),n[e]}}):t[n].apply(t,r)}:t[n]}})}}}]),n}(y.Plugin);"undefined"!=typeof window&&(window.ScatterTron=v)},3:function(t,n){t.exports=function(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}},31:function(t,n){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},32:function(t,n){function e(n,r){return t.exports=e=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t},e(n,r)}t.exports=e},4:function(t,n){function e(t,n){for(var e=0;e<n.length;e++){var r=n[e];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(t,r.key,r)}}t.exports=function(t,n,r){return n&&e(t.prototype,n),r&&e(t,r),t}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,