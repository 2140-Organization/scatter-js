!function(t){var e={};function r(n){if(e[n])return e[n].exports;var i=e[n]={i:n,l:!1,exports:{}};return t[n].call(i.exports,i,i.exports,r),i.l=!0,i.exports}r.m=t,r.c=e,r.d=function(t,e,n){r.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},r.t=function(t,e){if(1&e&&(t=r(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var i in t)r.d(n,i,function(e){return t[e]}.bind(null,i));return n},r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,"a",e),e},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.p="",r(r.s=244)}({0:function(t,e,r){t.exports=r(27)},1:function(t,e){t.exports=ScatterJS},102:function(t,e,r){"use strict";var n=this&&this.__assign||Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},i=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},o=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(i(arguments[e]));return t},a=this&&this.__values||function(t){var e="function"==typeof Symbol&&t[Symbol.iterator],r=0;return e?e.call(t):{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}}};Object.defineProperty(e,"__esModule",{value:!0});var s=r(103),u=function(){return function(t){void 0===t&&(t={}),this.skippedBinaryExtension=!1,this.options=t}}();e.SerializerState=u;var c=function(){function t(t){var e=void 0===t?{}:t,r=e.textEncoder,n=e.textDecoder,i=e.array;this.readPos=0,this.array=i||new Uint8Array(1024),this.length=i?i.length:0,this.textEncoder=r||new TextEncoder,this.textDecoder=n||new TextDecoder("utf-8",{fatal:!0})}return t.prototype.reserve=function(t){if(!(this.length+t<=this.array.length)){for(var e=this.array.length;this.length+t>e;)e=Math.ceil(1.5*e);var r=new Uint8Array(e);r.set(this.array),this.array=r}},t.prototype.haveReadData=function(){return this.readPos<this.length},t.prototype.restartRead=function(){this.readPos=0},t.prototype.asUint8Array=function(){return new Uint8Array(this.array.buffer,this.array.byteOffset,this.length)},t.prototype.pushArray=function(t){this.reserve(t.length),this.array.set(t,this.length),this.length+=t.length},t.prototype.push=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e];this.pushArray(t)},t.prototype.get=function(){if(this.readPos<this.length)return this.array[this.readPos++];throw new Error("Read past end of buffer")},t.prototype.pushUint8ArrayChecked=function(t,e){if(t.length!==e)throw new Error("Binary data has incorrect size");this.pushArray(t)},t.prototype.getUint8Array=function(t){if(this.readPos+t>this.length)throw new Error("Read past end of buffer");var e=new Uint8Array(this.array.buffer,this.array.byteOffset+this.readPos,t);return this.readPos+=t,e},t.prototype.pushUint16=function(t){this.push(t>>0&255,t>>8&255)},t.prototype.getUint16=function(){var t=0;return t|=this.get()<<0,t|=this.get()<<8},t.prototype.pushUint32=function(t){this.push(t>>0&255,t>>8&255,t>>16&255,t>>24&255)},t.prototype.getUint32=function(){var t=0;return t|=this.get()<<0,t|=this.get()<<8,t|=this.get()<<16,(t|=this.get()<<24)>>>0},t.prototype.pushNumberAsUint64=function(t){this.pushUint32(t>>>0),this.pushUint32(Math.floor(t/4294967296)>>>0)},t.prototype.getUint64AsNumber=function(){var t=this.getUint32();return 4294967296*(this.getUint32()>>>0)+(t>>>0)},t.prototype.pushVaruint32=function(t){for(;;){if(!(t>>>7)){this.push(t);break}this.push(128|127&t),t>>>=7}},t.prototype.getVaruint32=function(){for(var t=0,e=0;;){var r=this.get();if(t|=(127&r)<<e,e+=7,!(128&r))break}return t>>>0},t.prototype.pushVarint32=function(t){this.pushVaruint32(t<<1^t>>31)},t.prototype.getVarint32=function(){var t=this.getVaruint32();return 1&t?~t>>1|2147483648:t>>>1},t.prototype.pushFloat32=function(t){this.pushArray(new Uint8Array(new Float32Array([t]).buffer))},t.prototype.getFloat32=function(){return new Float32Array(this.getUint8Array(4).slice().buffer)[0]},t.prototype.pushFloat64=function(t){this.pushArray(new Uint8Array(new Float64Array([t]).buffer))},t.prototype.getFloat64=function(){return new Float64Array(this.getUint8Array(8).slice().buffer)[0]},t.prototype.pushName=function(t){if("string"!=typeof t)throw new Error("Expected string containing name");function e(t){return t>="a".charCodeAt(0)&&t<="z".charCodeAt(0)?t-"a".charCodeAt(0)+6:t>="1".charCodeAt(0)&&t<="5".charCodeAt(0)?t-"1".charCodeAt(0)+1:0}for(var r=new Uint8Array(8),n=63,i=0;i<t.length;++i){var o=e(t.charCodeAt(i));n<5&&(o<<=1);for(var a=4;a>=0;--a)n>=0&&(r[Math.floor(n/8)]|=(o>>a&1)<<n%8,--n)}this.pushArray(r)},t.prototype.getName=function(){for(var t=this.getUint8Array(8),e="",r=63;r>=0;){for(var n=0,i=0;i<5;++i)r>=0&&(n=n<<1|t[Math.floor(r/8)]>>r%8&1,--r);e+=n>=6?String.fromCharCode(n+"a".charCodeAt(0)-6):n>=1?String.fromCharCode(n+"1".charCodeAt(0)-1):"."}if("............."===e)return e;for(;e.endsWith(".");)e=e.substr(0,e.length-1);return e},t.prototype.pushBytes=function(t){this.pushVaruint32(t.length),this.pushArray(t)},t.prototype.getBytes=function(){return this.getUint8Array(this.getVaruint32())},t.prototype.pushString=function(t){this.pushBytes(this.textEncoder.encode(t))},t.prototype.getString=function(){return this.textDecoder.decode(this.getBytes())},t.prototype.pushSymbolCode=function(t){if("string"!=typeof t)throw new Error("Expected string containing symbol_code");var e=[];for(e.push.apply(e,o(this.textEncoder.encode(t)));e.length<8;)e.push(0);this.pushArray(e.slice(0,8))},t.prototype.getSymbolCode=function(){var t,e=this.getUint8Array(8);for(t=0;t<e.length&&e[t];++t);return this.textDecoder.decode(new Uint8Array(e.buffer,e.byteOffset,t))},t.prototype.pushSymbol=function(t){var e=t.name,r=[255&t.precision];for(r.push.apply(r,o(this.textEncoder.encode(e)));r.length<8;)r.push(0);this.pushArray(r.slice(0,8))},t.prototype.getSymbol=function(){var t,e=this.get(),r=this.getUint8Array(7);for(t=0;t<r.length&&r[t];++t);return{name:this.textDecoder.decode(new Uint8Array(r.buffer,r.byteOffset,t)),precision:e}},t.prototype.pushAsset=function(t){if("string"!=typeof t)throw new Error("Expected string containing asset");var e=0,r="",n=0;"-"===(t=t.trim())[e]&&(r+="-",++e);for(var i=!1;e<t.length&&t.charCodeAt(e)>="0".charCodeAt(0)&&t.charCodeAt(e)<="9".charCodeAt(0);)i=!0,r+=t[e],++e;if(!i)throw new Error("Asset must begin with a number");if("."===t[e])for(++e;e<t.length&&t.charCodeAt(e)>="0".charCodeAt(0)&&t.charCodeAt(e)<="9".charCodeAt(0);)r+=t[e],++n,++e;var o=t.substr(e).trim();this.pushArray(s.signedDecimalToBinary(8,r)),this.pushSymbol({name:o,precision:n})},t.prototype.getAsset=function(){var t=this.getUint8Array(8),e=this.getSymbol(),r=e.name,n=e.precision,i=s.signedBinaryToDecimal(t,n+1);return n&&(i=i.substr(0,i.length-n)+"."+i.substr(i.length-n)),i+" "+r},t.prototype.pushPublicKey=function(t){var e=s.stringToPublicKey(t);this.push(e.type),this.pushArray(e.data)},t.prototype.getPublicKey=function(){var t=this.get(),e=this.getUint8Array(s.publicKeyDataSize);return s.publicKeyToString({type:t,data:e})},t.prototype.pushPrivateKey=function(t){var e=s.stringToPrivateKey(t);this.push(e.type),this.pushArray(e.data)},t.prototype.getPrivateKey=function(){var t=this.get(),e=this.getUint8Array(s.privateKeyDataSize);return s.privateKeyToString({type:t,data:e})},t.prototype.pushSignature=function(t){var e=s.stringToSignature(t);this.push(e.type),this.pushArray(e.data)},t.prototype.getSignature=function(){var t=this.get(),e=this.getUint8Array(s.signatureDataSize);return s.signatureToString({type:t,data:e})},t}();function f(t){var e=Date.parse(t);if(Number.isNaN(e))throw new Error("Invalid time format");return e}function l(t){return Math.round(1e3*f(t+"Z"))}function h(t){var e=new Date(t/1e3).toISOString();return e.substr(0,e.length-1)}function p(t){return Math.round(f(t+"Z")/1e3)}function y(t){var e=new Date(1e3*t).toISOString();return e.substr(0,e.length-1)}function d(t){return Math.round((f(t+"Z")-9466848e5)/500)}function v(t){var e=new Date(500*t+9466848e5).toISOString();return e.substr(0,e.length-1)}function g(t){if("string"!=typeof t)throw new Error("Expected string containing symbol");var e=t.match(/^([0-9]+),([A-Z]+)$/);if(!e)throw new Error("Invalid symbol");return{name:e[2],precision:+e[1]}}function m(t){var e=t.name;return t.precision+","+e}function b(t){var e,r,n="";try{for(var i=a(t),o=i.next();!o.done;o=i.next()){n+=("00"+o.value.toString(16)).slice(-2)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(r=i.return)&&r.call(i)}finally{if(e)throw e.error}}return n.toUpperCase()}function w(t){if("string"!=typeof t)throw new Error("Expected string containing hex digits");if(t.length%2)throw new Error("Odd number of hex digits");for(var e=t.length/2,r=new Uint8Array(e),n=0;n<e;++n){var i=parseInt(t.substr(2*n,2),16);if(Number.isNaN(i))throw new Error("Expected hex string");r[n]=i}return r}function _(t,e){throw new Error("Don't know how to serialize "+this.name)}function x(t){throw new Error("Don't know how to deserialize "+this.name)}function A(t,e,r,n){var i,o;if(void 0===r&&(r=new u),void 0===n&&(n=!0),"object"!=typeof e)throw new Error("expected object containing data: "+JSON.stringify(e));this.base&&this.base.serialize(t,e,r,n);try{for(var s=a(this.fields),c=s.next();!c.done;c=s.next()){var f=c.value;if(f.name in e){if(r.skippedBinaryExtension)throw new Error("unexpected "+this.name+"."+f.name);f.type.serialize(t,e[f.name],r,n&&f===this.fields[this.fields.length-1])}else{if(!n||!f.type.extensionOf)throw new Error("missing "+this.name+"."+f.name+" (type="+f.type.name+")");r.skippedBinaryExtension=!0}}}catch(t){i={error:t}}finally{try{c&&!c.done&&(o=s.return)&&o.call(s)}finally{if(i)throw i.error}}}function z(t,e,r){var n,i,o;void 0===e&&(e=new u),void 0===r&&(r=!0),o=this.base?this.base.deserialize(t,e,r):{};try{for(var s=a(this.fields),c=s.next();!c.done;c=s.next()){var f=c.value;r&&f.type.extensionOf&&!t.haveReadData()?e.skippedBinaryExtension=!0:o[f.name]=f.type.deserialize(t,e,r)}}catch(t){n={error:t}}finally{try{c&&!c.done&&(i=s.return)&&i.call(s)}finally{if(n)throw n.error}}return o}function S(t,e,r,n){if(!Array.isArray(e)||2!==e.length||"string"!=typeof e[0])throw new Error('expected variant: ["type", value]');var i=this.fields.findIndex(function(t){return t.name===e[0]});if(i<0)throw new Error('type "'+e[0]+'" is not valid for variant');t.pushVaruint32(i),this.fields[i].type.serialize(t,e[1],r,n)}function E(t,e,r){var n=t.getVaruint32();if(n>=this.fields.length)throw new Error("type index "+n+" is not valid for variant");var i=this.fields[n];return[i.name,i.type.deserialize(t,e,r)]}function k(t,e,r,n){var i,o;t.pushVaruint32(e.length);try{for(var s=a(e),u=s.next();!u.done;u=s.next()){var c=u.value;this.arrayOf.serialize(t,c,r,!1)}}catch(t){i={error:t}}finally{try{u&&!u.done&&(o=s.return)&&o.call(s)}finally{if(i)throw i.error}}}function T(t,e,r){for(var n=t.getVaruint32(),i=[],o=0;o<n;++o)i.push(this.arrayOf.deserialize(t,e,!1));return i}function O(t,e,r,n){null===e||void 0===e?t.push(0):(t.push(1),this.optionalOf.serialize(t,e,r,n))}function P(t,e,r){return t.get()?this.optionalOf.deserialize(t,e,r):null}function U(t,e,r,n){this.extensionOf.serialize(t,e,r,n)}function D(t,e,r){return this.extensionOf.deserialize(t,e,r)}function C(t){return n({name:"<missing name>",aliasOfName:"",arrayOf:null,optionalOf:null,extensionOf:null,baseName:"",base:null,fields:[],serialize:_,deserialize:x},t)}function j(t,e){if(Number.isNaN(+t)||Number.isNaN(+e)||"number"!=typeof t&&"string"!=typeof t)throw new Error("Expected number");if(+t!=+e)throw new Error("Number is out of range");return+t}function K(t,e){var r=t.get(e);if(r&&r.aliasOfName)return K(t,r.aliasOfName);if(r)return r;if(e.endsWith("[]"))return C({name:e,arrayOf:K(t,e.substr(0,e.length-2)),serialize:k,deserialize:T});if(e.endsWith("?"))return C({name:e,optionalOf:K(t,e.substr(0,e.length-1)),serialize:O,deserialize:P});if(e.endsWith("$"))return C({name:e,extensionOf:K(t,e.substr(0,e.length-1)),serialize:U,deserialize:D});throw new Error("Unknown type: "+e)}function L(t,e,r,n,i,o){var a=t.actions.get(r);if(!a)throw new Error("Unknown action "+r+" in contract "+e);var s=new c({textEncoder:i,textDecoder:o});return a.serialize(s,n),b(s.asUint8Array())}function N(t,e,r,n,i,o){var a=t.actions.get(r);if("string"==typeof n&&(n=w(n)),!a)throw new Error("Unknown action "+r+" in contract "+e);var s=new c({textDecoder:o,textEncoder:i});return s.pushArray(n),a.deserialize(s)}e.SerialBuffer=c,e.supportedAbiVersion=function(t){return t.startsWith("eosio::abi/1.")},e.dateToTimePoint=l,e.timePointToDate=h,e.dateToTimePointSec=p,e.timePointSecToDate=y,e.dateToBlockTimestamp=d,e.blockTimestampToDate=v,e.stringToSymbol=g,e.symbolToString=m,e.arrayToHex=b,e.hexToUint8Array=w,e.createInitialTypes=function(){var t=new Map(Object.entries({bool:C({name:"bool",serialize:function(t,e){if("boolean"!=typeof e)throw new Error("Expected true or false");t.push(e?1:0)},deserialize:function(t){return!!t.get()}}),uint8:C({name:"uint8",serialize:function(t,e){t.push(j(e,255&e))},deserialize:function(t){return t.get()}}),int8:C({name:"int8",serialize:function(t,e){t.push(j(e,e<<24>>24))},deserialize:function(t){return t.get()<<24>>24}}),uint16:C({name:"uint16",serialize:function(t,e){t.pushUint16(j(e,65535&e))},deserialize:function(t){return t.getUint16()}}),int16:C({name:"int16",serialize:function(t,e){t.pushUint16(j(e,e<<16>>16))},deserialize:function(t){return t.getUint16()<<16>>16}}),uint32:C({name:"uint32",serialize:function(t,e){t.pushUint32(j(e,e>>>0))},deserialize:function(t){return t.getUint32()}}),uint64:C({name:"uint64",serialize:function(t,e){t.pushArray(s.decimalToBinary(8,""+e))},deserialize:function(t){return s.binaryToDecimal(t.getUint8Array(8))}}),int64:C({name:"int64",serialize:function(t,e){t.pushArray(s.signedDecimalToBinary(8,""+e))},deserialize:function(t){return s.signedBinaryToDecimal(t.getUint8Array(8))}}),int32:C({name:"int32",serialize:function(t,e){t.pushUint32(j(e,0|e))},deserialize:function(t){return 0|t.getUint32()}}),varuint32:C({name:"varuint32",serialize:function(t,e){t.pushVaruint32(j(e,e>>>0))},deserialize:function(t){return t.getVaruint32()}}),varint32:C({name:"varint32",serialize:function(t,e){t.pushVarint32(j(e,0|e))},deserialize:function(t){return t.getVarint32()}}),uint128:C({name:"uint128",serialize:function(t,e){t.pushArray(s.decimalToBinary(16,""+e))},deserialize:function(t){return s.binaryToDecimal(t.getUint8Array(16))}}),int128:C({name:"int128",serialize:function(t,e){t.pushArray(s.signedDecimalToBinary(16,""+e))},deserialize:function(t){return s.signedBinaryToDecimal(t.getUint8Array(16))}}),float32:C({name:"float32",serialize:function(t,e){t.pushFloat32(e)},deserialize:function(t){return t.getFloat32()}}),float64:C({name:"float64",serialize:function(t,e){t.pushFloat64(e)},deserialize:function(t){return t.getFloat64()}}),float128:C({name:"float128",serialize:function(t,e){t.pushUint8ArrayChecked(w(e),16)},deserialize:function(t){return b(t.getUint8Array(16))}}),bytes:C({name:"bytes",serialize:function(t,e){e instanceof Uint8Array||Array.isArray(e)?t.pushBytes(e):t.pushBytes(w(e))},deserialize:function(t,e){return e.options.bytesAsUint8Array?t.getBytes():b(t.getBytes())}}),string:C({name:"string",serialize:function(t,e){t.pushString(e)},deserialize:function(t){return t.getString()}}),name:C({name:"name",serialize:function(t,e){t.pushName(e)},deserialize:function(t){return t.getName()}}),time_point:C({name:"time_point",serialize:function(t,e){t.pushNumberAsUint64(l(e))},deserialize:function(t){return h(t.getUint64AsNumber())}}),time_point_sec:C({name:"time_point_sec",serialize:function(t,e){t.pushUint32(p(e))},deserialize:function(t){return y(t.getUint32())}}),block_timestamp_type:C({name:"block_timestamp_type",serialize:function(t,e){t.pushUint32(d(e))},deserialize:function(t){return v(t.getUint32())}}),symbol_code:C({name:"symbol_code",serialize:function(t,e){t.pushSymbolCode(e)},deserialize:function(t){return t.getSymbolCode()}}),symbol:C({name:"symbol",serialize:function(t,e){t.pushSymbol(g(e))},deserialize:function(t){return m(t.getSymbol())}}),asset:C({name:"asset",serialize:function(t,e){t.pushAsset(e)},deserialize:function(t){return t.getAsset()}}),checksum160:C({name:"checksum160",serialize:function(t,e){t.pushUint8ArrayChecked(w(e),20)},deserialize:function(t){return b(t.getUint8Array(20))}}),checksum256:C({name:"checksum256",serialize:function(t,e){t.pushUint8ArrayChecked(w(e),32)},deserialize:function(t){return b(t.getUint8Array(32))}}),checksum512:C({name:"checksum512",serialize:function(t,e){t.pushUint8ArrayChecked(w(e),64)},deserialize:function(t){return b(t.getUint8Array(64))}}),public_key:C({name:"public_key",serialize:function(t,e){t.pushPublicKey(e)},deserialize:function(t){return t.getPublicKey()}}),private_key:C({name:"private_key",serialize:function(t,e){t.pushPrivateKey(e)},deserialize:function(t){return t.getPrivateKey()}}),signature:C({name:"signature",serialize:function(t,e){t.pushSignature(e)},deserialize:function(t){return t.getSignature()}})}));return t.set("extended_asset",C({name:"extended_asset",baseName:"",fields:[{name:"quantity",typeName:"asset",type:t.get("asset")},{name:"contract",typeName:"name",type:t.get("name")}],serialize:A,deserialize:z})),t},e.getType=K,e.getTypesFromAbi=function(t,e){var r,n,o,s,u,c,f,l,h,p,y=new Map(t);if(e.types)try{for(var d=a(e.types),v=d.next();!v.done;v=d.next()){var g=v.value,m=g.new_type_name,b=g.type;y.set(m,C({name:m,aliasOfName:b}))}}catch(t){r={error:t}}finally{try{v&&!v.done&&(n=d.return)&&n.call(d)}finally{if(r)throw r.error}}if(e.structs)try{for(var w=a(e.structs),_=w.next();!_.done;_=w.next()){var x=_.value,k=x.name,T=x.base,O=x.fields;y.set(k,C({name:k,baseName:T,fields:O.map(function(t){return{name:t.name,typeName:t.type,type:null}}),serialize:A,deserialize:z}))}}catch(t){o={error:t}}finally{try{_&&!_.done&&(s=w.return)&&s.call(w)}finally{if(o)throw o.error}}if(e.variants)try{for(var P=a(e.variants),U=P.next();!U.done;U=P.next()){var D=U.value,j=D.name,L=D.types;y.set(j,C({name:j,fields:L.map(function(t){return{name:t,typeName:t,type:null}}),serialize:S,deserialize:E}))}}catch(t){u={error:t}}finally{try{U&&!U.done&&(c=P.return)&&c.call(P)}finally{if(u)throw u.error}}try{for(var N=a(y),B=N.next();!B.done;B=N.next()){var R=i(B.value,2);R[0],(b=R[1]).baseName&&(b.base=K(y,b.baseName));try{for(var M=a(b.fields),I=M.next();!I.done;I=M.next()){var F=I.value;F.type=K(y,F.typeName)}}catch(t){h={error:t}}finally{try{I&&!I.done&&(p=M.return)&&p.call(M)}finally{if(h)throw h.error}}}}catch(t){f={error:t}}finally{try{B&&!B.done&&(l=N.return)&&l.call(N)}finally{if(f)throw f.error}}return y},e.transactionHeader=function(t,e){return{expiration:y(p(t.timestamp)+e),ref_block_num:65535&t.block_num,ref_block_prefix:t.ref_block_prefix}},e.serializeActionData=L,e.serializeAction=function(t,e,r,n,i,o,a){return{account:e,name:r,authorization:n,data:L(t,e,r,i,o,a)}},e.deserializeActionData=N,e.deserializeAction=function(t,e,r,n,i,o,a){return{account:e,name:r,authorization:n,data:N(t,e,r,i,o,a)}}},103:function(t,e,r){"use strict";var n=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},i=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(n(arguments[e]));return t},o=this&&this.__values||function(t){var e="function"==typeof Symbol&&t[Symbol.iterator],r=0;return e?e.call(t):{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(246).RIPEMD160.hash,s="123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz",u="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";var c=function(){for(var t=Array(256).fill(-1),e=0;e<s.length;++e)t[s.charCodeAt(e)]=e;return t}();var f=function(){for(var t=Array(256).fill(-1),e=0;e<u.length;++e)t[u.charCodeAt(e)]=e;return t["=".charCodeAt(0)]=0,t}();function l(t){return 0!=(128&t[t.length-1])}function h(t){for(var e=1,r=0;r<t.length;++r){var n=(255&~t[r])+e;t[r]=n,e=n>>8}}function p(t,e){for(var r=new Uint8Array(t),n=0;n<e.length;++n){var i=e.charCodeAt(n);if(i<"0".charCodeAt(0)||i>"9".charCodeAt(0))throw new Error("invalid number");for(var o=i-"0".charCodeAt(0),a=0;a<t;++a){var s=10*r[a]+o;r[a]=s,o=s>>8}if(o)throw new Error("number is out of range")}return r}function y(t,e){void 0===e&&(e=1);for(var r=Array(e).fill("0".charCodeAt(0)),n=t.length-1;n>=0;--n){for(var o=t[n],a=0;a<r.length;++a){var s=(r[a]-"0".charCodeAt(0)<<8)+o;r[a]="0".charCodeAt(0)+s%10,o=s/10|0}for(;o;)r.push("0".charCodeAt(0)+o%10),o=o/10|0}return r.reverse(),String.fromCharCode.apply(String,i(r))}function d(t,e){for(var r=new Uint8Array(t),n=0;n<e.length;++n){var i=c[e.charCodeAt(n)];if(i<0)throw new Error("invalid base-58 value");for(var o=0;o<t;++o){var a=58*r[o]+i;r[o]=a,i=a>>8}if(i)throw new Error("base-58 value is out of range")}return r.reverse(),r}function v(t,e){var r,n,a,u;void 0===e&&(e=1);var f=[];try{for(var l=o(t),h=l.next();!h.done;h=l.next()){for(var p=h.value,y=0;y<f.length;++y){var d=(c[f[y]]<<8)+p;f[y]=s.charCodeAt(d%58),p=d/58|0}for(;p;)f.push(s.charCodeAt(p%58)),p=p/58|0}}catch(t){r={error:t}}finally{try{h&&!h.done&&(n=l.return)&&n.call(l)}finally{if(r)throw r.error}}try{for(var v=o(t),g=v.next();!g.done;g=v.next()){if(g.value)break;f.push("1".charCodeAt(0))}}catch(t){a={error:t}}finally{try{g&&!g.done&&(u=v.return)&&u.call(v)}finally{if(a)throw a.error}}return f.reverse(),String.fromCharCode.apply(String,i(f))}function g(t,e){for(var r=new Uint8Array(t.length+e.length),n=0;n<t.length;++n)r[n]=t[n];for(n=0;n<e.length;++n)r[t.length+n]=e.charCodeAt(n);return a(r)}function m(t,e,r,n){var i=d(r+4,t),o={type:e,data:new Uint8Array(i.buffer,0,r)},a=new Uint8Array(g(o.data,n));if(a[0]!==i[r+0]||a[1]!==i[r+1]||a[2]!==i[r+2]||a[3]!==i[r+3])throw new Error("checksum doesn't match");return o}function b(t,e,r){for(var n=new Uint8Array(g(t.data,e)),i=new Uint8Array(t.data.length+4),o=0;o<t.data.length;++o)i[o]=t.data[o];for(o=0;o<4;++o)i[o+t.data.length]=n[o];return r+v(i)}function w(t){if("string"!=typeof t)throw new Error("expected string containing public key");if("EOS"===t.substr(0,3)){for(var r=d(e.publicKeyDataSize+4,t.substr(3)),n={type:0,data:new Uint8Array(e.publicKeyDataSize)},i=0;i<e.publicKeyDataSize;++i)n.data[i]=r[i];var o=new Uint8Array(a(n.data));if(o[0]!==r[e.publicKeyDataSize]||o[1]!==r[34]||o[2]!==r[35]||o[3]!==r[36])throw new Error("checksum doesn't match");return n}if("PUB_K1_"===t.substr(0,7))return m(t.substr(7),0,e.publicKeyDataSize,"K1");if("PUB_R1_"===t.substr(0,7))return m(t.substr(7),1,e.publicKeyDataSize,"R1");throw new Error("unrecognized public key format")}function _(t){if(0===t.type&&t.data.length===e.publicKeyDataSize)return b(t,"K1","PUB_K1_");if(1===t.type&&t.data.length===e.publicKeyDataSize)return b(t,"R1","PUB_R1_");throw new Error("unrecognized public key format")}function x(t){return"EOS"===t.substr(0,3)?_(w(t)):t}e.isNegative=l,e.negate=h,e.decimalToBinary=p,e.signedDecimalToBinary=function(t,e){var r="-"===e[0];r&&(e=e.substr(1));var n=p(t,e);if(r){if(h(n),!l(n))throw new Error("number is out of range")}else if(l(n))throw new Error("number is out of range");return n},e.binaryToDecimal=y,e.signedBinaryToDecimal=function(t,e){if(void 0===e&&(e=1),l(t)){var r=t.slice();return h(r),"-"+y(r,e)}return y(t,e)},e.base58ToBinary=d,e.binaryToBase58=v,e.base64ToBinary=function(t){var e=t.length;if(1==(3&e)&&"="===t[e-1]&&(e-=1),0!=(3&e))throw new Error("base-64 value is not padded correctly");var r=e>>2,n=3*r;e>0&&"="===t[e-1]&&("="===t[e-2]?n-=2:n-=1);for(var i=new Uint8Array(n),o=0;o<r;++o){var a=f[t.charCodeAt(4*o+0)],s=f[t.charCodeAt(4*o+1)],u=f[t.charCodeAt(4*o+2)],c=f[t.charCodeAt(4*o+3)];i[3*o+0]=a<<2|s>>4,3*o+1<n&&(i[3*o+1]=(15&s)<<4|u>>2),3*o+2<n&&(i[3*o+2]=(3&u)<<6|c)}return i},e.publicKeyDataSize=33,e.privateKeyDataSize=32,e.signatureDataSize=65,e.stringToPublicKey=w,e.publicKeyToString=_,e.convertLegacyPublicKey=x,e.convertLegacyPublicKeys=function(t){return t.map(x)},e.stringToPrivateKey=function(t){if("string"!=typeof t)throw new Error("expected string containing private key");if("PVT_R1_"===t.substr(0,7))return m(t.substr(7),1,e.privateKeyDataSize,"R1");throw new Error("unrecognized private key format")},e.privateKeyToString=function(t){if(1===t.type)return b(t,"R1","PVT_R1_");throw new Error("unrecognized private key format")},e.stringToSignature=function(t){if("string"!=typeof t)throw new Error("expected string containing signature");if("SIG_K1_"===t.substr(0,7))return m(t.substr(7),0,e.signatureDataSize,"K1");if("SIG_R1_"===t.substr(0,7))return m(t.substr(7),1,e.signatureDataSize,"R1");throw new Error("unrecognized signature format")},e.signatureToString=function(t){if(0===t.type)return b(t,"K1","SIG_K1_");if(1===t.type)return b(t,"R1","SIG_R1_");throw new Error("unrecognized signature format")}},104:function(t,e,r){"use strict";var n=this&&this.__extends||function(){var t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var r in e)e.hasOwnProperty(r)&&(t[r]=e[r])};return function(e,r){function n(){this.constructor=e}t(e,r),e.prototype=null===r?Object.create(r):(n.prototype=r.prototype,new n)}}();Object.defineProperty(e,"__esModule",{value:!0});var i=function(t){function e(r){var n=this;return n=r.error&&r.error.details&&r.error.details.length&&r.error.details[0].message?t.call(this,r.error.details[0].message)||this:r.processed&&r.processed.except&&r.processed.except.message?t.call(this,r.processed.except.message)||this:t.call(this,r.message)||this,Object.setPrototypeOf(n,e.prototype),n.json=r,n}return n(e,t),e}(Error);e.default=i},18:function(t,e){function r(t){return(r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function n(e){return"function"==typeof Symbol&&"symbol"===r(Symbol.iterator)?t.exports=n=function(t){return r(t)}:t.exports=n=function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":r(t)},n(e)}t.exports=n},2:function(t,e){function r(t,e,r,n,i,o,a){try{var s=t[o](a),u=s.value}catch(t){return void r(t)}s.done?e(u):Promise.resolve(u).then(n,i)}t.exports=function(t){return function(){var e=this,n=arguments;return new Promise(function(i,o){var a=t.apply(e,n);function s(t){r(a,i,o,s,u,"next",t)}function u(t){r(a,i,o,s,u,"throw",t)}s(void 0)})}}},23:function(t,e){t.exports=function(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}},24:function(t,e){function r(e,n){return t.exports=r=Object.setPrototypeOf||function(t,e){return t.__proto__=e,t},r(e,n)}t.exports=r},244:function(t,e,r){"use strict";r.r(e),r.d(e,"default",function(){return A});var n=r(5),i=r.n(n),o=r(3),a=r.n(o),s=r(4),u=r.n(s),c=r(7),f=r.n(c),l=r(8),h=r.n(l),p=r(9),y=r.n(p),d=r(0),v=r.n(d),g=r(2),m=r.n(g),b=r(1),w=r(73),_=!1;"undefined"!=typeof window&&window.addEventListener("lynxMobileLoaded",function(){return _=!0});var x=function(){var t=m()(v.a.mark(function t(){var e,r,n=arguments;return v.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return e=0<n.length&&void 0!==n[0]?n[0]:null,r=1<n.length&&void 0!==n[1]?n[1]:0,t.abrupt("return",new Promise(function(t){return e||(e=t),_?e(!0):5<r?e(!1):void setTimeout(function(){return x(e,r+1)},100)}));case 3:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}(),A=function(t){function e(){var t;return a()(this,e),(t=f()(this,h()(e).call(this,b.Blockchains.EOS,b.PluginTypes.WALLET_SUPPORT))).name="Lynx",t}return y()(e,t),u()(e,[{key:"init",value:function(t,e,r){this.context=t,this.holderFns=e,this.socketSetters=r}},{key:"connect",value:function(){var t=m()(v.a.mark(function t(){return v.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",new Promise(function(){var t=m()(v.a.mark(function t(e){return v.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,x();case 2:t.sent&&e(!0);case 4:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()));case 1:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"runAfterInterfacing",value:function(){var t=m()(v.a.mark(function t(){var e,r=this;return v.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return this.methods()[b.WALLET_METHODS.getIdentity](),e={sendApiRequest:function(t){return r.methods()[t.type](t.payload)}},this.socketSetters.map(function(t){return t(e)}),t.abrupt("return",!0);case 4:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()},{key:"methods",value:function(){var t,e=this;return t={},i()(t,b.WALLET_METHODS.getIdentity,function(){var t=m()(v.a.mark(function t(){var r,n,i,o,a;return v.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.next=2,window.lynxMobile.requestSetAccountName();case 2:if(r=t.sent){t.next=5;break}return t.abrupt("return",null);case 5:return t.next=7,window.lynxMobile.requestSetAccount(r);case 7:if(n=t.sent){t.next=10;break}return t.abrupt("return",null);case 10:return i=n.account.permissions.find(function(t){return"active"===t.perm_name}),o=[{name:n.account.account_name,authority:i.perm_name,publicKey:i.required_auth.keys[0].key,blockchain:b.Blockchains.EOS,isHardware:!1,chainId:"aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906"}],a={name:o[0].name,accounts:o},e.context.identity=a,t.abrupt("return",a);case 15:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()),i()(t,b.WALLET_METHODS.forgetIdentity,m()(v.a.mark(function t(){return v.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return e.context.identity=null,t.abrupt("return",!0);case 2:case"end":return t.stop()}},t,this)}))),i()(t,"identityFromPermissions",function(){var t=m()(v.a.mark(function t(){return v.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",e.context.identity);case 1:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()),i()(t,b.WALLET_METHODS.getIdentityFromPermissions,m()(v.a.mark(function t(){return v.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:return t.abrupt("return",e.context.identity);case 1:case"end":return t.stop()}},t,this)}))),i()(t,b.WALLET_METHODS.requestSignature,function(){var t=m()(v.a.mark(function t(e){var r,n,i,o,a,s;return v.a.wrap(function(t){for(;;)switch(t.prev=t.next){case 0:if(e.abis,r=e.transaction,n=e.network,console.log("transaction",r),r.hasOwnProperty("serializedTransaction")){t.next=4;break}throw new Error("Lynx only supports eosjs2(20.0.0+) syntax");case 4:if("aca376f206b8fc25a6ed44dbdc66547c36c6c33e3a119ffbeaef943642f0e906"===r.chainId){t.next=6;break}throw new Error("Lynx only supports mainnet.");case 6:return i=new w.JsonRpc(b.Network.fromJson(n).fullhost()),o=new w.Api({rpc:i}),r.abis.map(function(t){var e=t.account_name,r=t.abi;return o.cachedAbis.set(e,{rawAbi:r,abi:o.rawAbiToJson(r)})}),t.next=11,o.deserializeTransactionWithActions(r.serializedTransaction);case 11:return a=t.sent,console.log("parsed",a),t.next=15,window.lynxMobile.transact(a);case 15:s=t.sent,console.log("result",s);case 17:case"end":return t.stop()}},t,this)}));return function(){return t.apply(this,arguments)}}()),t}}]),e}(b.Plugin);"undefined"!=typeof window&&(window.ScatterLynx=A)},245:function(t,e,r){"use strict";var n=this&&this.__assign||Object.assign||function(t){for(var e,r=1,n=arguments.length;r<n;r++)for(var i in e=arguments[r])Object.prototype.hasOwnProperty.call(e,i)&&(t[i]=e[i]);return t},i=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))(function(i,o){function a(t){try{u(n.next(t))}catch(t){o(t)}}function s(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):new r(function(e){e(t.value)}).then(a,s)}u((n=n.apply(t,e||[])).next())})},o=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},a=this&&this.__rest||function(t,e){var r={};for(var n in t)Object.prototype.hasOwnProperty.call(t,n)&&e.indexOf(n)<0&&(r[n]=t[n]);if(null!=t&&"function"==typeof Object.getOwnPropertySymbols){var i=0;for(n=Object.getOwnPropertySymbols(t);i<n.length;i++)e.indexOf(n[i])<0&&(r[n[i]]=t[n[i]])}return r},s=this&&this.__read||function(t,e){var r="function"==typeof Symbol&&t[Symbol.iterator];if(!r)return t;var n,i,o=r.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(n=o.next()).done;)a.push(n.value)}catch(t){i={error:t}}finally{try{n&&!n.done&&(r=o.return)&&r.call(o)}finally{if(i)throw i.error}}return a},u=this&&this.__spread||function(){for(var t=[],e=0;e<arguments.length;e++)t=t.concat(s(arguments[e]));return t},c=this&&this.__values||function(t){var e="function"==typeof Symbol&&t[Symbol.iterator],r=0;return e?e.call(t):{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}}};Object.defineProperty(e,"__esModule",{value:!0});var f=r(102),l=r(247),h=r(248),p=function(){function t(t){this.contracts=new Map,this.cachedAbis=new Map,this.rpc=t.rpc,this.authorityProvider=t.authorityProvider||t.rpc,this.abiProvider=t.abiProvider||t.rpc,this.signatureProvider=t.signatureProvider,this.chainId=t.chainId,this.textEncoder=t.textEncoder,this.textDecoder=t.textDecoder,this.abiTypes=f.getTypesFromAbi(f.createInitialTypes(),l),this.transactionTypes=f.getTypesFromAbi(f.createInitialTypes(),h)}return t.prototype.rawAbiToJson=function(t){var e=new f.SerialBuffer({textEncoder:this.textEncoder,textDecoder:this.textDecoder,array:t});if(!f.supportedAbiVersion(e.getString()))throw new Error("Unsupported abi version");return e.restartRead(),this.abiTypes.get("abi_def").deserialize(e)},t.prototype.getCachedAbi=function(t,e){return void 0===e&&(e=!1),i(this,void 0,void 0,function(){var r,n,i,a;return o(this,function(o){switch(o.label){case 0:if(!e&&this.cachedAbis.get(t))return[2,this.cachedAbis.get(t)];o.label=1;case 1:return o.trys.push([1,3,,4]),[4,this.abiProvider.getRawAbi(t)];case 2:return n=o.sent().abi,i=this.rawAbiToJson(n),r={rawAbi:n,abi:i},[3,4];case 3:throw(a=o.sent()).message="fetching abi for "+t+": "+a.message,a;case 4:if(!r)throw new Error("Missing abi for "+t);return this.cachedAbis.set(t,r),[2,r]}})})},t.prototype.getAbi=function(t,e){return void 0===e&&(e=!1),i(this,void 0,void 0,function(){return o(this,function(r){switch(r.label){case 0:return[4,this.getCachedAbi(t,e)];case 1:return[2,r.sent().abi]}})})},t.prototype.getTransactionAbis=function(t,e){return void 0===e&&(e=!1),i(this,void 0,void 0,function(){var r,n,a,s=this;return o(this,function(c){return r=t.actions.map(function(t){return t.account}),n=new Set(r),a=u(n).map(function(t){return i(s,void 0,void 0,function(){var r;return o(this,function(n){switch(n.label){case 0:return r={accountName:t},[4,this.getCachedAbi(t,e)];case 1:return[2,(r.abi=n.sent().rawAbi,r)]}})})}),[2,Promise.all(a)]})})},t.prototype.getContract=function(t,e){return void 0===e&&(e=!1),i(this,void 0,void 0,function(){var r,n,i,a,s,u,l,h,p,y,d;return o(this,function(o){switch(o.label){case 0:return!e&&this.contracts.get(t)?[2,this.contracts.get(t)]:[4,this.getAbi(t,e)];case 1:i=o.sent(),a=f.getTypesFromAbi(f.createInitialTypes(),i),s=new Map;try{for(u=c(i.actions),l=u.next();!l.done;l=u.next())h=l.value,p=h.name,y=h.type,s.set(p,f.getType(a,y))}catch(t){r={error:t}}finally{try{l&&!l.done&&(n=u.return)&&n.call(u)}finally{if(r)throw r.error}}return d={types:a,actions:s},this.contracts.set(t,d),[2,d]}})})},t.prototype.serialize=function(t,e,r){this.transactionTypes.get(e).serialize(t,r)},t.prototype.deserialize=function(t,e){return this.transactionTypes.get(e).deserialize(t)},t.prototype.serializeTransaction=function(t){var e=new f.SerialBuffer({textEncoder:this.textEncoder,textDecoder:this.textDecoder});return this.serialize(e,"transaction",n({max_net_usage_words:0,max_cpu_usage_ms:0,delay_sec:0,context_free_actions:[],actions:[],transaction_extensions:[]},t)),e.asUint8Array()},t.prototype.deserializeTransaction=function(t){var e=new f.SerialBuffer({textEncoder:this.textEncoder,textDecoder:this.textDecoder});return e.pushArray(t),this.deserialize(e,"transaction")},t.prototype.serializeActions=function(t){return i(this,void 0,void 0,function(){var e=this;return o(this,function(r){switch(r.label){case 0:return[4,Promise.all(t.map(function(t){var r=t.account,n=t.name,a=t.authorization,s=t.data;return i(e,void 0,void 0,function(){var t;return o(this,function(e){switch(e.label){case 0:return[4,this.getContract(r)];case 1:return t=e.sent(),[2,f.serializeAction(t,r,n,a,s,this.textEncoder,this.textDecoder)]}})})}))];case 1:return[2,r.sent()]}})})},t.prototype.deserializeActions=function(t){return i(this,void 0,void 0,function(){var e=this;return o(this,function(r){switch(r.label){case 0:return[4,Promise.all(t.map(function(t){var r=t.account,n=t.name,a=t.authorization,s=t.data;return i(e,void 0,void 0,function(){var t;return o(this,function(e){switch(e.label){case 0:return[4,this.getContract(r)];case 1:return t=e.sent(),[2,f.deserializeAction(t,r,n,a,s,this.textEncoder,this.textDecoder)]}})})}))];case 1:return[2,r.sent()]}})})},t.prototype.deserializeTransactionWithActions=function(t){return i(this,void 0,void 0,function(){var e,r;return o(this,function(i){switch(i.label){case 0:return"string"==typeof t&&(t=f.hexToUint8Array(t)),e=this.deserializeTransaction(t),[4,this.deserializeActions(e.actions)];case 1:return r=i.sent(),[2,n({},e,{actions:r})]}})})},t.prototype.transact=function(t,e){var r=void 0===e?{}:e,a=r.broadcast,s=void 0===a||a,u=r.sign,c=void 0===u||u,l=r.blocksBehind,h=r.expireSeconds;return i(this,void 0,void 0,function(){var e,r,i,a,u,p,y,d,v;return o(this,function(o){switch(o.label){case 0:return this.chainId?[3,2]:[4,this.rpc.get_info()];case 1:e=o.sent(),this.chainId=e.chain_id,o.label=2;case 2:return"number"==typeof l&&h?e?[3,4]:[4,this.rpc.get_info()]:[3,6];case 3:e=o.sent(),o.label=4;case 4:return[4,this.rpc.get_block(e.head_block_num-l)];case 5:r=o.sent(),t=n({},f.transactionHeader(r,h),t),o.label=6;case 6:if(!this.hasRequiredTaposFields(t))throw new Error("Required configuration or TAPOS fields are not present");return[4,this.getTransactionAbis(t)];case 7:return i=o.sent(),a=[{},t],u={},[4,this.serializeActions(t.actions)];case 8:return t=n.apply(void 0,a.concat([(u.actions=o.sent(),u)])),p=this.serializeTransaction(t),y={serializedTransaction:p,signatures:[]},c?[4,this.signatureProvider.getAvailableKeys()]:[3,12];case 9:return d=o.sent(),[4,this.authorityProvider.getRequiredKeys({transaction:t,availableKeys:d})];case 10:return v=o.sent(),[4,this.signatureProvider.sign({chainId:this.chainId,requiredKeys:v,serializedTransaction:p,abis:i})];case 11:y=o.sent(),o.label=12;case 12:return s?[2,this.pushSignedTransaction(y)]:[2,y]}})})},t.prototype.pushSignedTransaction=function(t){var e=t.signatures,r=t.serializedTransaction;return i(this,void 0,void 0,function(){return o(this,function(t){return[2,this.rpc.push_transaction({signatures:e,serializedTransaction:r})]})})},t.prototype.hasRequiredTaposFields=function(t){var e=t.expiration,r=t.ref_block_num,n=t.ref_block_prefix;a(t,["expiration","ref_block_num","ref_block_prefix"]);return!!(e&&r&&n)},t}();e.default=p},246:function(t,e,r){"use strict";var n=function(){return function(t,e){if(Array.isArray(t))return t;if(Symbol.iterator in Object(t))return function(t,e){var r=[],n=!0,i=!1,o=void 0;try{for(var a,s=t[Symbol.iterator]();!(n=(a=s.next()).done)&&(r.push(a.value),!e||r.length!==e);n=!0);}catch(t){i=!0,o=t}finally{try{!n&&s.return&&s.return()}finally{if(i)throw o}}return r}(t,e);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}(),i=function(){function t(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}return function(e,r,n){return r&&t(e.prototype,r),n&&t(e,n),e}}();var o=function(){function t(){!function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}(this,t)}return i(t,null,[{key:"get_n_pad_bytes",value:function(t){return 64-(t+8&63)}},{key:"pad",value:function(e){var r=e.byteLength,i=t.get_n_pad_bytes(r),o=function(t,e){return[Math.floor(t/e),t%e]}(r,536870912).map(function(t,e){return e?8*t:t}),a=n(o,2),s=a[0],u=a[1],c=new Uint8Array(r+i+8);c.set(new Uint8Array(e),0);var f=new DataView(c.buffer);return f.setUint8(r,128),f.setUint32(r+i,u,!0),f.setUint32(r+i+4,s,!0),c.buffer}},{key:"f",value:function(t,e,r,n){return 0<=t&&t<=15?e^r^n:16<=t&&t<=31?e&r|~e&n:32<=t&&t<=47?(e|~r)^n:48<=t&&t<=63?e&n|r&~n:64<=t&&t<=79?e^(r|~n):void 0}},{key:"K",value:function(t){return 0<=t&&t<=15?0:16<=t&&t<=31?1518500249:32<=t&&t<=47?1859775393:48<=t&&t<=63?2400959708:64<=t&&t<=79?2840853838:void 0}},{key:"KP",value:function(t){return 0<=t&&t<=15?1352829926:16<=t&&t<=31?1548603684:32<=t&&t<=47?1836072691:48<=t&&t<=63?2053994217:64<=t&&t<=79?0:void 0}},{key:"add_modulo32",value:function(){return 0|Array.from(arguments).reduce(function(t,e){return t+e},0)}},{key:"rol32",value:function(t,e){return t<<e|t>>>32-e}},{key:"hash",value:function(e){for(var r=t.pad(e),n=[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,7,4,13,1,10,6,15,3,12,0,9,5,2,14,11,8,3,10,14,4,9,15,8,1,2,7,0,6,13,11,5,12,1,9,11,10,0,8,12,4,13,3,7,15,14,5,6,2,4,0,5,9,7,12,2,10,14,1,3,8,11,6,15,13],i=[5,14,7,0,9,2,11,4,13,6,15,8,1,10,3,12,6,11,3,7,0,13,5,10,14,15,8,12,4,9,1,2,15,5,1,3,7,14,6,9,11,8,12,2,10,0,4,13,8,6,4,1,3,11,15,0,5,12,2,13,9,7,10,14,12,15,10,4,1,5,8,7,6,2,13,14,0,3,9,11],o=[11,14,15,12,5,8,7,9,11,13,14,15,6,7,9,8,7,6,8,13,11,9,7,15,7,12,15,9,11,7,13,12,11,13,6,7,14,9,13,15,14,8,13,6,5,12,7,5,11,12,14,15,14,15,9,8,9,14,5,6,8,6,5,12,9,15,5,11,6,8,13,12,5,12,13,14,11,8,5,6],a=[8,9,9,11,13,15,15,5,7,7,8,11,14,14,12,6,9,13,15,7,12,8,9,11,7,7,12,7,6,15,13,11,9,7,15,11,8,6,6,14,12,13,5,14,13,13,7,5,15,5,8,11,14,14,6,14,6,9,12,9,12,5,15,8,8,5,12,9,12,5,14,6,8,13,6,5,15,13,11,11],s=r.byteLength/64,u=new Array(s).fill(void 0).map(function(t,e){return function(t){return new DataView(r,64*e,64).getUint32(4*t,!0)}}),c=[1732584193,4023233417,2562383102,271733878,3285377520],f=0;f<s;++f){for(var l=c[0],h=c[1],p=c[2],y=c[3],d=c[4],v=l,g=h,m=p,b=y,w=d,_=0;_<80;++_){var x=t.add_modulo32(t.rol32(t.add_modulo32(l,t.f(_,h,p,y),u[f](n[_]),t.K(_)),o[_]),d);l=d,d=y,y=t.rol32(p,10),p=h,h=x,x=t.add_modulo32(t.rol32(t.add_modulo32(v,t.f(79-_,g,m,b),u[f](i[_]),t.KP(_)),a[_]),w),v=w,w=b,b=t.rol32(m,10),m=g,g=x}var A=t.add_modulo32(c[1],p,b);c[1]=t.add_modulo32(c[2],y,w),c[2]=t.add_modulo32(c[3],d,v),c[3]=t.add_modulo32(c[4],l,g),c[4]=t.add_modulo32(c[0],h,m),c[0]=A}var z=new ArrayBuffer(20),S=new DataView(z);return c.forEach(function(t,e){return S.setUint32(4*e,t,!0)}),z}}]),t}();t.exports={RIPEMD160:o}},247:function(t){t.exports={version:"eosio::abi/1.1",structs:[{name:"extensions_entry",base:"",fields:[{name:"tag",type:"uint16"},{name:"value",type:"bytes"}]},{name:"type_def",base:"",fields:[{name:"new_type_name",type:"string"},{name:"type",type:"string"}]},{name:"field_def",base:"",fields:[{name:"name",type:"string"},{name:"type",type:"string"}]},{name:"struct_def",base:"",fields:[{name:"name",type:"string"},{name:"base",type:"string"},{name:"fields",type:"field_def[]"}]},{name:"action_def",base:"",fields:[{name:"name",type:"name"},{name:"type",type:"string"},{name:"ricardian_contract",type:"string"}]},{name:"table_def",base:"",fields:[{name:"name",type:"name"},{name:"index_type",type:"string"},{name:"key_names",type:"string[]"},{name:"key_types",type:"string[]"},{name:"type",type:"string"}]},{name:"clause_pair",base:"",fields:[{name:"id",type:"string"},{name:"body",type:"string"}]},{name:"error_message",base:"",fields:[{name:"error_code",type:"uint64"},{name:"error_msg",type:"string"}]},{name:"variant_def",base:"",fields:[{name:"name",type:"string"},{name:"types",type:"string[]"}]},{name:"abi_def",base:"",fields:[{name:"version",type:"string"},{name:"types",type:"type_def[]"},{name:"structs",type:"struct_def[]"},{name:"actions",type:"action_def[]"},{name:"tables",type:"table_def[]"},{name:"ricardian_clauses",type:"clause_pair[]"},{name:"error_messages",type:"error_message[]"},{name:"abi_extensions",type:"extensions_entry[]"},{name:"variants",type:"variant_def[]$"}]}]}},248:function(t){t.exports={version:"eosio::abi/1.0",types:[{new_type_name:"account_name",type:"name"},{new_type_name:"action_name",type:"name"},{new_type_name:"permission_name",type:"name"}],structs:[{name:"permission_level",base:"",fields:[{name:"actor",type:"account_name"},{name:"permission",type:"permission_name"}]},{name:"action",base:"",fields:[{name:"account",type:"account_name"},{name:"name",type:"action_name"},{name:"authorization",type:"permission_level[]"},{name:"data",type:"bytes"}]},{name:"extension",base:"",fields:[{name:"type",type:"uint16"},{name:"data",type:"bytes"}]},{name:"transaction_header",base:"",fields:[{name:"expiration",type:"time_point_sec"},{name:"ref_block_num",type:"uint16"},{name:"ref_block_prefix",type:"uint32"},{name:"max_net_usage_words",type:"varuint32"},{name:"max_cpu_usage_ms",type:"uint8"},{name:"delay_sec",type:"varuint32"}]},{name:"transaction",base:"transaction_header",fields:[{name:"context_free_actions",type:"action[]"},{name:"actions",type:"action[]"},{name:"transaction_extensions",type:"extension[]"}]}]}},249:function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0})},250:function(t,e,r){"use strict";(function(t){var n=this&&this.__awaiter||function(t,e,r,n){return new(r||(r=Promise))(function(i,o){function a(t){try{u(n.next(t))}catch(t){o(t)}}function s(t){try{u(n.throw(t))}catch(t){o(t)}}function u(t){t.done?i(t.value):new r(function(e){e(t.value)}).then(a,s)}u((n=n.apply(t,e||[])).next())})},i=this&&this.__generator||function(t,e){var r,n,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(r)throw new TypeError("Generator is already executing.");for(;a;)try{if(r=1,n&&(i=2&o[0]?n.return:o[0]?n.throw||((i=n.return)&&i.call(n),0):n.next)&&!(i=i.call(n,o[1])).done)return i;switch(n=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,n=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!(i=(i=a.trys).length>0&&i[i.length-1])&&(6===o[0]||2===o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=e.call(t,a)}catch(t){o=[6,t],n=0}finally{r=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}},o=this&&this.__values||function(t){var e="function"==typeof Symbol&&t[Symbol.iterator],r=0;return e?e.call(t):{next:function(){return t&&r>=t.length&&(t=void 0),{value:t&&t[r++],done:!t}}}};Object.defineProperty(e,"__esModule",{value:!0});var a=r(103),s=r(104);var u=function(){function e(e,r){void 0===r&&(r={}),this.endpoint=e,r.fetch?this.fetchBuiltin=r.fetch:this.fetchBuiltin=t.fetch}return e.prototype.fetch=function(t,e){return n(this,void 0,void 0,function(){var r,n,o;return i(this,function(i){switch(i.label){case 0:return i.trys.push([0,3,,4]),[4,(0,this.fetchBuiltin)(this.endpoint+t,{body:JSON.stringify(e),method:"POST"})];case 1:return[4,(r=i.sent()).json()];case 2:if((n=i.sent()).processed&&n.processed.except)throw new s.default(n);return[3,4];case 3:throw(o=i.sent()).isFetchError=!0,o;case 4:if(!r.ok)throw new s.default(n);return[2,n]}})})},e.prototype.get_abi=function(t){return n(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this.fetch("/v1/chain/get_abi",{account_name:t})];case 1:return[2,e.sent()]}})})},e.prototype.get_account=function(t){return n(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this.fetch("/v1/chain/get_account",{account_name:t})];case 1:return[2,e.sent()]}})})},e.prototype.get_block_header_state=function(t){return n(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this.fetch("/v1/chain/get_block_header_state",{block_num_or_id:t})];case 1:return[2,e.sent()]}})})},e.prototype.get_block=function(t){return n(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this.fetch("/v1/chain/get_block",{block_num_or_id:t})];case 1:return[2,e.sent()]}})})},e.prototype.get_code=function(t){return n(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this.fetch("/v1/chain/get_code",{account_name:t})];case 1:return[2,e.sent()]}})})},e.prototype.get_currency_balance=function(t,e,r){return void 0===r&&(r=null),n(this,void 0,void 0,function(){return i(this,function(n){switch(n.label){case 0:return[4,this.fetch("/v1/chain/get_currency_balance",{code:t,account:e,symbol:r})];case 1:return[2,n.sent()]}})})},e.prototype.get_currency_stats=function(t,e){return n(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.fetch("/v1/chain/get_currency_stats",{code:t,symbol:e})];case 1:return[2,r.sent()]}})})},e.prototype.get_info=function(){return n(this,void 0,void 0,function(){return i(this,function(t){switch(t.label){case 0:return[4,this.fetch("/v1/chain/get_info",{})];case 1:return[2,t.sent()]}})})},e.prototype.get_producer_schedule=function(){return n(this,void 0,void 0,function(){return i(this,function(t){switch(t.label){case 0:return[4,this.fetch("/v1/chain/get_producer_schedule",{})];case 1:return[2,t.sent()]}})})},e.prototype.get_producers=function(t,e,r){return void 0===t&&(t=!0),void 0===e&&(e=""),void 0===r&&(r=50),n(this,void 0,void 0,function(){return i(this,function(n){switch(n.label){case 0:return[4,this.fetch("/v1/chain/get_producers",{json:t,lower_bound:e,limit:r})];case 1:return[2,n.sent()]}})})},e.prototype.get_raw_code_and_abi=function(t){return n(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this.fetch("/v1/chain/get_raw_code_and_abi",{account_name:t})];case 1:return[2,e.sent()]}})})},e.prototype.getRawAbi=function(t){return n(this,void 0,void 0,function(){var e,r;return i(this,function(n){switch(n.label){case 0:return[4,this.get_raw_code_and_abi(t)];case 1:return e=n.sent(),r=a.base64ToBinary(e.abi),[2,{accountName:e.account_name,abi:r}]}})})},e.prototype.get_table_rows=function(t){var e=t.json,r=void 0===e||e,o=t.code,a=t.scope,s=t.table,u=t.table_key,c=void 0===u?"":u,f=t.lower_bound,l=void 0===f?"":f,h=t.upper_bound,p=void 0===h?"":h,y=t.index_position,d=void 0===y?1:y,v=t.key_type,g=void 0===v?"":v,m=t.limit,b=void 0===m?10:m;return n(this,void 0,void 0,function(){return i(this,function(t){switch(t.label){case 0:return[4,this.fetch("/v1/chain/get_table_rows",{json:r,code:o,scope:a,table:s,table_key:c,lower_bound:l,upper_bound:p,index_position:d,key_type:g,limit:b})];case 1:return[2,t.sent()]}})})},e.prototype.getRequiredKeys=function(t){return n(this,void 0,void 0,function(){var e;return i(this,function(r){switch(r.label){case 0:return e=a.convertLegacyPublicKeys,[4,this.fetch("/v1/chain/get_required_keys",{transaction:t.transaction,available_keys:t.availableKeys})];case 1:return[2,e.apply(void 0,[r.sent().required_keys])]}})})},e.prototype.push_transaction=function(t){var e=t.signatures,r=t.serializedTransaction;return n(this,void 0,void 0,function(){return i(this,function(t){switch(t.label){case 0:return[4,this.fetch("/v1/chain/push_transaction",{signatures:e,compression:0,packed_context_free_data:"",packed_trx:function(t){var e,r,n="";try{for(var i=o(t),a=i.next();!a.done;a=i.next())n+=("00"+a.value.toString(16)).slice(-2)}catch(t){e={error:t}}finally{try{a&&!a.done&&(r=i.return)&&r.call(i)}finally{if(e)throw e.error}}return n}(r)})];case 1:return[2,t.sent()]}})})},e.prototype.db_size_get=function(){return n(this,void 0,void 0,function(){return i(this,function(t){switch(t.label){case 0:return[4,this.fetch("/v1/db_size/get",{})];case 1:return[2,t.sent()]}})})},e.prototype.history_get_actions=function(t,e,r){return void 0===e&&(e=null),void 0===r&&(r=null),n(this,void 0,void 0,function(){return i(this,function(n){switch(n.label){case 0:return[4,this.fetch("/v1/history/get_actions",{account_name:t,pos:e,offset:r})];case 1:return[2,n.sent()]}})})},e.prototype.history_get_transaction=function(t,e){return void 0===e&&(e=null),n(this,void 0,void 0,function(){return i(this,function(r){switch(r.label){case 0:return[4,this.fetch("/v1/history/get_transaction",{id:t,block_num_hint:e})];case 1:return[2,r.sent()]}})})},e.prototype.history_get_key_accounts=function(t){return n(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this.fetch("/v1/history/get_key_accounts",{public_key:t})];case 1:return[2,e.sent()]}})})},e.prototype.history_get_controlled_accounts=function(t){return n(this,void 0,void 0,function(){return i(this,function(e){switch(e.label){case 0:return[4,this.fetch("/v1/history/get_controlled_accounts",{controlling_account:t})];case 1:return[2,e.sent()]}})})},e}();e.default=u}).call(this,r(6))},251:function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0})},27:function(t,e,r){var n=function(){return this||"object"==typeof self&&self}()||Function("return this")(),i=n.regeneratorRuntime&&Object.getOwnPropertyNames(n).indexOf("regeneratorRuntime")>=0,o=i&&n.regeneratorRuntime;if(n.regeneratorRuntime=void 0,t.exports=r(28),i)n.regeneratorRuntime=o;else try{delete n.regeneratorRuntime}catch(t){n.regeneratorRuntime=void 0}},28:function(t,e){!function(e){"use strict";var r,n=Object.prototype,i=n.hasOwnProperty,o="function"==typeof Symbol?Symbol:{},a=o.iterator||"@@iterator",s=o.asyncIterator||"@@asyncIterator",u=o.toStringTag||"@@toStringTag",c="object"==typeof t,f=e.regeneratorRuntime;if(f)c&&(t.exports=f);else{(f=e.regeneratorRuntime=c?t.exports:{}).wrap=w;var l="suspendedStart",h="suspendedYield",p="executing",y="completed",d={},v={};v[a]=function(){return this};var g=Object.getPrototypeOf,m=g&&g(g(U([])));m&&m!==n&&i.call(m,a)&&(v=m);var b=z.prototype=x.prototype=Object.create(v);A.prototype=b.constructor=z,z.constructor=A,z[u]=A.displayName="GeneratorFunction",f.isGeneratorFunction=function(t){var e="function"==typeof t&&t.constructor;return!!e&&(e===A||"GeneratorFunction"===(e.displayName||e.name))},f.mark=function(t){return Object.setPrototypeOf?Object.setPrototypeOf(t,z):(t.__proto__=z,u in t||(t[u]="GeneratorFunction")),t.prototype=Object.create(b),t},f.awrap=function(t){return{__await:t}},S(E.prototype),E.prototype[s]=function(){return this},f.AsyncIterator=E,f.async=function(t,e,r,n){var i=new E(w(t,e,r,n));return f.isGeneratorFunction(e)?i:i.next().then(function(t){return t.done?t.value:i.next()})},S(b),b[u]="Generator",b[a]=function(){return this},b.toString=function(){return"[object Generator]"},f.keys=function(t){var e=[];for(var r in t)e.push(r);return e.reverse(),function r(){for(;e.length;){var n=e.pop();if(n in t)return r.value=n,r.done=!1,r}return r.done=!0,r}},f.values=U,P.prototype={constructor:P,reset:function(t){if(this.prev=0,this.next=0,this.sent=this._sent=r,this.done=!1,this.delegate=null,this.method="next",this.arg=r,this.tryEntries.forEach(O),!t)for(var e in this)"t"===e.charAt(0)&&i.call(this,e)&&!isNaN(+e.slice(1))&&(this[e]=r)},stop:function(){this.done=!0;var t=this.tryEntries[0].completion;if("throw"===t.type)throw t.arg;return this.rval},dispatchException:function(t){if(this.done)throw t;var e=this;function n(n,i){return s.type="throw",s.arg=t,e.next=n,i&&(e.method="next",e.arg=r),!!i}for(var o=this.tryEntries.length-1;o>=0;--o){var a=this.tryEntries[o],s=a.completion;if("root"===a.tryLoc)return n("end");if(a.tryLoc<=this.prev){var u=i.call(a,"catchLoc"),c=i.call(a,"finallyLoc");if(u&&c){if(this.prev<a.catchLoc)return n(a.catchLoc,!0);if(this.prev<a.finallyLoc)return n(a.finallyLoc)}else if(u){if(this.prev<a.catchLoc)return n(a.catchLoc,!0)}else{if(!c)throw new Error("try statement without catch or finally");if(this.prev<a.finallyLoc)return n(a.finallyLoc)}}}},abrupt:function(t,e){for(var r=this.tryEntries.length-1;r>=0;--r){var n=this.tryEntries[r];if(n.tryLoc<=this.prev&&i.call(n,"finallyLoc")&&this.prev<n.finallyLoc){var o=n;break}}o&&("break"===t||"continue"===t)&&o.tryLoc<=e&&e<=o.finallyLoc&&(o=null);var a=o?o.completion:{};return a.type=t,a.arg=e,o?(this.method="next",this.next=o.finallyLoc,d):this.complete(a)},complete:function(t,e){if("throw"===t.type)throw t.arg;return"break"===t.type||"continue"===t.type?this.next=t.arg:"return"===t.type?(this.rval=this.arg=t.arg,this.method="return",this.next="end"):"normal"===t.type&&e&&(this.next=e),d},finish:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.finallyLoc===t)return this.complete(r.completion,r.afterLoc),O(r),d}},catch:function(t){for(var e=this.tryEntries.length-1;e>=0;--e){var r=this.tryEntries[e];if(r.tryLoc===t){var n=r.completion;if("throw"===n.type){var i=n.arg;O(r)}return i}}throw new Error("illegal catch attempt")},delegateYield:function(t,e,n){return this.delegate={iterator:U(t),resultName:e,nextLoc:n},"next"===this.method&&(this.arg=r),d}}}function w(t,e,r,n){var i=e&&e.prototype instanceof x?e:x,o=Object.create(i.prototype),a=new P(n||[]);return o._invoke=function(t,e,r){var n=l;return function(i,o){if(n===p)throw new Error("Generator is already running");if(n===y){if("throw"===i)throw o;return D()}for(r.method=i,r.arg=o;;){var a=r.delegate;if(a){var s=k(a,r);if(s){if(s===d)continue;return s}}if("next"===r.method)r.sent=r._sent=r.arg;else if("throw"===r.method){if(n===l)throw n=y,r.arg;r.dispatchException(r.arg)}else"return"===r.method&&r.abrupt("return",r.arg);n=p;var u=_(t,e,r);if("normal"===u.type){if(n=r.done?y:h,u.arg===d)continue;return{value:u.arg,done:r.done}}"throw"===u.type&&(n=y,r.method="throw",r.arg=u.arg)}}}(t,r,a),o}function _(t,e,r){try{return{type:"normal",arg:t.call(e,r)}}catch(t){return{type:"throw",arg:t}}}function x(){}function A(){}function z(){}function S(t){["next","throw","return"].forEach(function(e){t[e]=function(t){return this._invoke(e,t)}})}function E(t){var e;this._invoke=function(r,n){function o(){return new Promise(function(e,o){!function e(r,n,o,a){var s=_(t[r],t,n);if("throw"!==s.type){var u=s.arg,c=u.value;return c&&"object"==typeof c&&i.call(c,"__await")?Promise.resolve(c.__await).then(function(t){e("next",t,o,a)},function(t){e("throw",t,o,a)}):Promise.resolve(c).then(function(t){u.value=t,o(u)},function(t){return e("throw",t,o,a)})}a(s.arg)}(r,n,e,o)})}return e=e?e.then(o,o):o()}}function k(t,e){var n=t.iterator[e.method];if(n===r){if(e.delegate=null,"throw"===e.method){if(t.iterator.return&&(e.method="return",e.arg=r,k(t,e),"throw"===e.method))return d;e.method="throw",e.arg=new TypeError("The iterator does not provide a 'throw' method")}return d}var i=_(n,t.iterator,e.arg);if("throw"===i.type)return e.method="throw",e.arg=i.arg,e.delegate=null,d;var o=i.arg;return o?o.done?(e[t.resultName]=o.value,e.next=t.nextLoc,"return"!==e.method&&(e.method="next",e.arg=r),e.delegate=null,d):o:(e.method="throw",e.arg=new TypeError("iterator result is not an object"),e.delegate=null,d)}function T(t){var e={tryLoc:t[0]};1 in t&&(e.catchLoc=t[1]),2 in t&&(e.finallyLoc=t[2],e.afterLoc=t[3]),this.tryEntries.push(e)}function O(t){var e=t.completion||{};e.type="normal",delete e.arg,t.completion=e}function P(t){this.tryEntries=[{tryLoc:"root"}],t.forEach(T,this),this.reset(!0)}function U(t){if(t){var e=t[a];if(e)return e.call(t);if("function"==typeof t.next)return t;if(!isNaN(t.length)){var n=-1,o=function e(){for(;++n<t.length;)if(i.call(t,n))return e.value=t[n],e.done=!1,e;return e.value=r,e.done=!0,e};return o.next=o}}return{next:D}}function D(){return{value:r,done:!0}}}(function(){return this||"object"==typeof self&&self}()||Function("return this")())},3:function(t,e){t.exports=function(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}},4:function(t,e){function r(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,n.key,n)}}t.exports=function(t,e,n){return e&&r(t.prototype,e),n&&r(t,n),t}},5:function(t,e){t.exports=function(t,e,r){return e in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}},6:function(t,e){var r;r=function(){return this}();try{r=r||Function("return this")()||(0,eval)("this")}catch(t){"object"==typeof window&&(r=window)}t.exports=r},7:function(t,e,r){var n=r(18),i=r(23);t.exports=function(t,e){return!e||"object"!==n(e)&&"function"!=typeof e?i(t):e}},73:function(t,e,r){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var n=r(245);e.Api=n.default;var i=r(249);e.ApiInterfaces=i;var o=r(250);e.JsonRpc=o.default;var a=r(251);e.RpcInterfaces=a;var s=r(104);e.RpcError=s.default;var u=r(102);e.Serialize=u},8:function(t,e){function r(e){return t.exports=r=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)},r(e)}t.exports=r},9:function(t,e,r){var n=r(24);t.exports=function(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),e&&n(t,e)}}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,